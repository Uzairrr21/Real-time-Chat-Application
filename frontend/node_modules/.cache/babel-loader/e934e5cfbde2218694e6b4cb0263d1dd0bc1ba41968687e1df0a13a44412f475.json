{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\OneDrive\\\\Desktop\\\\mern-chat-app\\\\frontend\\\\src\\\\context\\\\ChatContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useEffect, useContext } from 'react';\nimport axios from 'axios';\nimport AuthContext from './AuthContext';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContext = /*#__PURE__*/createContext();\nexport const ChatProvider = ({\n  children\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [onlineUsers, setOnlineUsers] = useState([]);\n  const [typingUsers, setTypingUsers] = useState([]);\n  const [socket, setSocket] = useState(null);\n  const {\n    user,\n    isAuthenticated\n  } = useContext(AuthContext);\n\n  // Connect to WebSocket server\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      const newSocket = io('http://localhost:5000');\n      setSocket(newSocket);\n\n      // Register user with WebSocket server\n      newSocket.emit('register', {\n        userId: user.id\n      });\n\n      // Listen for messages\n      newSocket.on('message', data => {\n        setMessages(prev => [...prev, data.message]);\n      });\n\n      // Listen for online users updates\n      newSocket.on('onlineUsers', data => {\n        setOnlineUsers(data.users);\n      });\n\n      // Listen for typing indicators\n      newSocket.on('typing', data => {\n        if (data.isTyping) {\n          setTypingUsers(prev => [...prev, data.userId]);\n        } else {\n          setTypingUsers(prev => prev.filter(id => id !== data.userId));\n        }\n      });\n      return () => {\n        newSocket.disconnect();\n      };\n    }\n  }, [isAuthenticated, user]);\n\n  // Load initial messages\n  useEffect(() => {\n    if (isAuthenticated) {\n      const fetchMessages = async () => {\n        try {\n          const res = await axios.get('/api/messages');\n          setMessages(res.data);\n        } catch (err) {\n          console.error(err);\n        }\n      };\n      fetchMessages();\n    }\n  }, [isAuthenticated]);\n\n  // Send message\n  const sendMessage = async content => {\n    try {\n      const res = await axios.post('/api/messages', {\n        content\n      });\n      socket.emit('message', {\n        type: 'message',\n        message: res.data\n      });\n    } catch (err) {\n      console.error(err);\n      throw err.response.data;\n    }\n  };\n\n  // Send typing indicator\n  const sendTyping = isTyping => {\n    if (socket) {\n      socket.emit('typing', {\n        type: 'typing',\n        userId: user.id,\n        isTyping\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: {\n      messages,\n      onlineUsers,\n      typingUsers,\n      sendMessage,\n      sendTyping\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatProvider, \"wGupAi9LtE81nPn/TINocR2MYNo=\");\n_c = ChatProvider;\nexport default ChatContext;\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","useContext","axios","AuthContext","io","jsxDEV","_jsxDEV","ChatContext","ChatProvider","children","_s","messages","setMessages","onlineUsers","setOnlineUsers","typingUsers","setTypingUsers","socket","setSocket","user","isAuthenticated","newSocket","emit","userId","id","on","data","prev","message","users","isTyping","filter","disconnect","fetchMessages","res","get","err","console","error","sendMessage","content","post","type","response","sendTyping","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/DELL/OneDrive/Desktop/mern-chat-app/frontend/src/context/ChatContext.js"],"sourcesContent":["import { createContext, useState, useEffect, useContext } from 'react';\r\nimport axios from 'axios';\r\nimport AuthContext from './AuthContext';\r\nimport io from 'socket.io-client';\r\n\r\nconst ChatContext = createContext();\r\n\r\nexport const ChatProvider = ({ children }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [onlineUsers, setOnlineUsers] = useState([]);\r\n  const [typingUsers, setTypingUsers] = useState([]);\r\n  const [socket, setSocket] = useState(null);\r\n  const { user, isAuthenticated } = useContext(AuthContext);\r\n\r\n  // Connect to WebSocket server\r\n  useEffect(() => {\r\n    if (isAuthenticated && user) {\r\n      const newSocket = io('http://localhost:5000');\r\n      setSocket(newSocket);\r\n\r\n      // Register user with WebSocket server\r\n      newSocket.emit('register', { userId: user.id });\r\n\r\n      // Listen for messages\r\n      newSocket.on('message', (data) => {\r\n        setMessages(prev => [...prev, data.message]);\r\n      });\r\n\r\n      // Listen for online users updates\r\n      newSocket.on('onlineUsers', (data) => {\r\n        setOnlineUsers(data.users);\r\n      });\r\n\r\n      // Listen for typing indicators\r\n      newSocket.on('typing', (data) => {\r\n        if (data.isTyping) {\r\n          setTypingUsers(prev => [...prev, data.userId]);\r\n        } else {\r\n          setTypingUsers(prev => prev.filter(id => id !== data.userId));\r\n        }\r\n      });\r\n\r\n      return () => {\r\n        newSocket.disconnect();\r\n      };\r\n    }\r\n  }, [isAuthenticated, user]);\r\n\r\n  // Load initial messages\r\n  useEffect(() => {\r\n    if (isAuthenticated) {\r\n      const fetchMessages = async () => {\r\n        try {\r\n          const res = await axios.get('/api/messages');\r\n          setMessages(res.data);\r\n        } catch (err) {\r\n          console.error(err);\r\n        }\r\n      };\r\n      fetchMessages();\r\n    }\r\n  }, [isAuthenticated]);\r\n\r\n  // Send message\r\n  const sendMessage = async (content) => {\r\n    try {\r\n      const res = await axios.post('/api/messages', { content });\r\n      socket.emit('message', { \r\n        type: 'message',\r\n        message: res.data \r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n      throw err.response.data;\r\n    }\r\n  };\r\n\r\n  // Send typing indicator\r\n  const sendTyping = (isTyping) => {\r\n    if (socket) {\r\n      socket.emit('typing', { \r\n        type: 'typing',\r\n        userId: user.id,\r\n        isTyping \r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        messages,\r\n        onlineUsers,\r\n        typingUsers,\r\n        sendMessage,\r\n        sendTyping\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ChatContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}