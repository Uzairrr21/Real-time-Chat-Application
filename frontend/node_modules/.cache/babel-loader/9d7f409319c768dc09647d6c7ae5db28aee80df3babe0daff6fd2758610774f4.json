{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\OneDrive\\\\Desktop\\\\mern-chat-app\\\\frontend\\\\src\\\\context\\\\ChatContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useEffect, useContext, useCallback } from 'react';\nimport axios from 'axios';\nimport { io } from 'socket.io-client';\nimport AuthContext from './AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContext = /*#__PURE__*/createContext();\nexport const ChatProvider = ({\n  children\n}) => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [onlineUsers, setOnlineUsers] = useState([]);\n  const [typingUsers, setTypingUsers] = useState([]);\n  const [socket, setSocket] = useState(null);\n  const [connectionStatus, setConnectionStatus] = useState('disconnected');\n  const {\n    user,\n    isAuthenticated,\n    token,\n    logout\n  } = useContext(AuthContext);\n\n  // Initialize socket connection\n  useEffect(() => {\n    if (isAuthenticated && user && token) {\n      const newSocket = io('http://localhost:5000', {\n        path: '/socket.io/',\n        withCredentials: true,\n        transports: ['websocket'],\n        reconnectionAttempts: 5,\n        reconnectionDelay: 1000,\n        extraHeaders: {\n          'x-auth-token': token\n        }\n      });\n      setSocket(newSocket);\n      setConnectionStatus('connecting');\n      newSocket.on('connect', () => {\n        console.log('Socket connected');\n        setConnectionStatus('connected');\n        newSocket.emit('register', user.id);\n      });\n      newSocket.on('disconnect', reason => {\n        console.log('Socket disconnected:', reason);\n        setConnectionStatus('disconnected');\n      });\n      newSocket.on('connect_error', err => {\n        console.error('Socket connection error:', err);\n        setConnectionStatus('error');\n        setTimeout(() => newSocket.connect(), 5000); // Reconnect after 5 seconds\n      });\n      newSocket.on('message', message => {\n        setMessages(prev => [...prev, message]);\n      });\n      newSocket.on('onlineUsers', users => {\n        setOnlineUsers(users);\n      });\n      newSocket.on('typing', ({\n        userId,\n        isTyping\n      }) => {\n        setTypingUsers(prev => isTyping ? [...new Set([...prev, userId])] : prev.filter(id => id !== userId));\n      });\n      return () => {\n        newSocket.disconnect();\n        setConnectionStatus('disconnected');\n      };\n    }\n  }, [isAuthenticated, user, token]);\n\n  // Fetch messages\n  const fetchMessages = useCallback(async () => {\n    try {\n      const res = await axios.get('/api/messages', {\n        headers: {\n          'x-auth-token': token\n        }\n      });\n      setMessages(res.data);\n    } catch (err) {\n      var _err$response;\n      if (((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.status) === 401) {\n        logout();\n      }\n      console.error('Error fetching messages:', err);\n    }\n  }, [token, logout]);\n  useEffect(() => {\n    if (isAuthenticated && token) {\n      fetchMessages();\n    }\n  }, [isAuthenticated, token, fetchMessages]);\n\n  // Send message\n  const sendMessage = async content => {\n    try {\n      if (!socket || !socket.connected) {\n        throw new Error('Not connected to server');\n      }\n      const res = await axios.post('/api/messages', {\n        content\n      }, {\n        headers: {\n          'x-auth-token': token\n        }\n      });\n      socket.emit('message', res.data);\n      return res.data;\n    } catch (err) {\n      var _err$response2, _err$response3;\n      if (((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.status) === 401) {\n        logout();\n      }\n      console.error('Error sending message:', err);\n      throw ((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : _err$response3.data) || {\n        message: 'Failed to send message'\n      };\n    }\n  };\n\n  // Typing indicator\n  const sendTyping = isTyping => {\n    if (socket && socket.connected) {\n      socket.emit('typing', {\n        userId: user.id,\n        isTyping\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: {\n      messages,\n      onlineUsers,\n      typingUsers,\n      sendMessage,\n      sendTyping,\n      fetchMessages,\n      connectionStatus\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatProvider, \"OvN1kgKCcVySP0uuBTR7s4opFSg=\");\n_c = ChatProvider;\nexport default ChatContext;\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","useContext","useCallback","axios","io","AuthContext","jsxDEV","_jsxDEV","ChatContext","ChatProvider","children","_s","messages","setMessages","onlineUsers","setOnlineUsers","typingUsers","setTypingUsers","socket","setSocket","connectionStatus","setConnectionStatus","user","isAuthenticated","token","logout","newSocket","path","withCredentials","transports","reconnectionAttempts","reconnectionDelay","extraHeaders","on","console","log","emit","id","reason","err","error","setTimeout","connect","message","prev","users","userId","isTyping","Set","filter","disconnect","fetchMessages","res","get","headers","data","_err$response","response","status","sendMessage","content","connected","Error","post","_err$response2","_err$response3","sendTyping","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/DELL/OneDrive/Desktop/mern-chat-app/frontend/src/context/ChatContext.js"],"sourcesContent":["import { createContext, useState, useEffect, useContext, useCallback } from 'react';\r\nimport axios from 'axios';\r\nimport { io } from 'socket.io-client';\r\nimport AuthContext from './AuthContext';\r\n\r\nconst ChatContext = createContext();\r\n\r\nexport const ChatProvider = ({ children }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [onlineUsers, setOnlineUsers] = useState([]);\r\n  const [typingUsers, setTypingUsers] = useState([]);\r\n  const [socket, setSocket] = useState(null);\r\n  const [connectionStatus, setConnectionStatus] = useState('disconnected');\r\n  const { user, isAuthenticated, token, logout } = useContext(AuthContext);\r\n\r\n  // Initialize socket connection\r\n  useEffect(() => {\r\n    if (isAuthenticated && user && token) {\r\n      const newSocket = io('http://localhost:5000', {\r\n        path: '/socket.io/',\r\n        withCredentials: true,\r\n        transports: ['websocket'],\r\n        reconnectionAttempts: 5,\r\n        reconnectionDelay: 1000,\r\n        extraHeaders: {\r\n          'x-auth-token': token\r\n        }\r\n      });\r\n\r\n      setSocket(newSocket);\r\n      setConnectionStatus('connecting');\r\n\r\n      newSocket.on('connect', () => {\r\n        console.log('Socket connected');\r\n        setConnectionStatus('connected');\r\n        newSocket.emit('register', user.id);\r\n      });\r\n\r\n      newSocket.on('disconnect', (reason) => {\r\n        console.log('Socket disconnected:', reason);\r\n        setConnectionStatus('disconnected');\r\n      });\r\n\r\n      newSocket.on('connect_error', (err) => {\r\n        console.error('Socket connection error:', err);\r\n        setConnectionStatus('error');\r\n        setTimeout(() => newSocket.connect(), 5000); // Reconnect after 5 seconds\r\n      });\r\n\r\n      newSocket.on('message', (message) => {\r\n        setMessages(prev => [...prev, message]);\r\n      });\r\n\r\n      newSocket.on('onlineUsers', (users) => {\r\n        setOnlineUsers(users);\r\n      });\r\n\r\n      newSocket.on('typing', ({ userId, isTyping }) => {\r\n        setTypingUsers(prev => \r\n          isTyping \r\n            ? [...new Set([...prev, userId])] \r\n            : prev.filter(id => id !== userId)\r\n        );\r\n      });\r\n\r\n      return () => {\r\n        newSocket.disconnect();\r\n        setConnectionStatus('disconnected');\r\n      };\r\n    }\r\n  }, [isAuthenticated, user, token]);\r\n\r\n  // Fetch messages\r\n  const fetchMessages = useCallback(async () => {\r\n    try {\r\n      const res = await axios.get('/api/messages', {\r\n        headers: {\r\n          'x-auth-token': token\r\n        }\r\n      });\r\n      setMessages(res.data);\r\n    } catch (err) {\r\n      if (err.response?.status === 401) {\r\n        logout();\r\n      }\r\n      console.error('Error fetching messages:', err);\r\n    }\r\n  }, [token, logout]);\r\n\r\n  useEffect(() => {\r\n    if (isAuthenticated && token) {\r\n      fetchMessages();\r\n    }\r\n  }, [isAuthenticated, token, fetchMessages]);\r\n\r\n  // Send message\r\n  const sendMessage = async (content) => {\r\n    try {\r\n      if (!socket || !socket.connected) {\r\n        throw new Error('Not connected to server');\r\n      }\r\n      \r\n      const res = await axios.post('/api/messages', { content }, {\r\n        headers: {\r\n          'x-auth-token': token\r\n        }\r\n      });\r\n      socket.emit('message', res.data);\r\n      return res.data;\r\n    } catch (err) {\r\n      if (err.response?.status === 401) {\r\n        logout();\r\n      }\r\n      console.error('Error sending message:', err);\r\n      throw err.response?.data || { message: 'Failed to send message' };\r\n    }\r\n  };\r\n\r\n  // Typing indicator\r\n  const sendTyping = (isTyping) => {\r\n    if (socket && socket.connected) {\r\n      socket.emit('typing', { userId: user.id, isTyping });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ChatContext.Provider value={{ \r\n      messages, \r\n      onlineUsers, \r\n      typingUsers, \r\n      sendMessage, \r\n      sendTyping,\r\n      fetchMessages,\r\n      connectionStatus\r\n    }}>\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ChatContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}